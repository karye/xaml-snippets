{
	"XAML label": {
        "scope": "xml",
        "prefix": "label",
		"body": [
			"<Label Name=\"$1\">$2</Label>"
		],
		"description": "Label element"
	},
	"XAML Button": {
        "scope": "xml",
        "prefix": "button",
		"body": [
			"<Button Click=\"$1\" Name=\"$2\">$3</Button>"
		],
		"description": "Button element"
	},
	"XAML TextBlock": {
        "scope": "xml",
        "prefix": "textblock",
		"body": [
			"<TextBlock Name=\"$1\">$2</TextBlock>"
		],
		"description": "TextBlock element"
	},
	"XAML TextBox": {
        "scope": "xml",
        "prefix": "textbox",
		"body": [
			"<TextBox Name=\"$1\">$2</TextBox>"
		],
		"description": "TextBox element"
	},
	"XAML CheckBox": {
		"scope": "xml",
		"prefix": "checkbox",
		"body": [
			"<CheckBox Name=\"$1\">$2</CheckBox>"
		],
		"description": "CheckBox element"
	},
	"XAML RadioButton": {
		"scope": "xml",
		"prefix": "radiobutton",
		"body": [
			"<RadioButton Name=\"$1\">$2</RadioButton>"
		],
		"description": "RadioButton element"
	},
	"XAML StackPanel": {
        "scope": "xml",
        "prefix": "stackpanel",
		"body": [
			"<StackPanel Orientation=\"$1\" Margin=\"$2\">",
			"\t$3",
			"</StackPanel>"
		],
		"description": "StackPanel element"
	},
	"XAML Grid": {
        "scope": "xml",
        "prefix": "grid",
		"body": [
			"<Grid Margin=\"$1\">",
			"\t$2",
			"</Grid>"
		],
		"description": "Grid element"
	},
	"XAML RowDefinition": {
        "scope": "xml",
        "prefix": "rowdefinition",
		"body": [
			"<RowDefinition Height=\"$1\" />"
		],
		"description": "RowDefinition element"
	},
	"XAML ColumnDefinition": {
        "scope": "xml",
        "prefix": "columndefinition",
		"body": [
			"<ColumnDefinition Width=\"$1\" />"
		],
		"description": "ColumnDefinition element"
	},
	"XAML Image": {
        "scope": "xml",
        "prefix": "image",
		"body": [
			"<Image Source=\"$1\" Name=\"$2\" />"
		],
		"description": "Image element"
	},
    "XAML event": {
        "scope": "csharp",
		"prefix": "event",
		"body": [
			"private void $1(object sender, RoutedEventArgs e)",
			"{",
			"\t$2",
			"}"
		],
		"description": "Event handler"
	}
}